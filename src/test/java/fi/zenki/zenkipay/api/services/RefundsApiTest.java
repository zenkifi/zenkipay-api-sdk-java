/*
 * Zenkipay API
 * Definition of technical specification of the product; Zenkipay is a gateway cryptocurrency payment system that allows merchant's to receive payments on their e-commerce portals. Unlike other platforms, Zenkipay ensures customer satisfaction through its payment process. guarantee deposit (delivered product and expected quality) to settle payment to the merchant, thus avoiding the loss of client assets due to online scams.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@zenki.fi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fi.zenki.zenkipay.api.services;

import fi.zenki.zenkipay.api.ApiException;
import fi.zenki.zenkipay.api.model.ErrorResponse;
import fi.zenki.zenkipay.api.model.Refund;
import fi.zenki.zenkipay.api.model.RequestRefund;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for RefundsApi
 */
@Ignore
public class RefundsApiTest {

    private final RefundsApi api = new RefundsApi();

    
    /**
     * Request refunds for an order.
     *
     * The refund is consulted by the order number.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRefundOrderTest() throws ApiException {
        String zenkiOrderId = null;
        String zenkiRefundId = null;
        String contentType = null;
        String accept = null;
        String X_ZENKI_PLUGIN_ID = null;
        String acceptLanguage = null;
        Refund response = 
        api.getRefundOrder(zenkiOrderId, zenkiRefundId, contentType, accept, X_ZENKI_PLUGIN_ID, acceptLanguage);
        
        // TODO: test validations
    }
    
    /**
     * Register of refunds for an order.
     *
     * One or more refunds are recorded by the order number.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerRefundOrderTest() throws ApiException {
        String zenkiOrderId = null;
        String contentType = null;
        String accept = null;
        String X_ZENKI_PLUGIN_ID = null;
        String acceptLanguage = null;
        RequestRefund requestRefund = null;
        Refund response = 
        api.registerRefundOrder(zenkiOrderId, contentType, accept, X_ZENKI_PLUGIN_ID, acceptLanguage, requestRefund);
        
        // TODO: test validations
    }
    
}
