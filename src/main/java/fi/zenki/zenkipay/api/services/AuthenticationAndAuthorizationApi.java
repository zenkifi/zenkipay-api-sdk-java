/*
 * Zenkipay API
 * Definition of technical specification of the product; Zenkipay is a gateway cryptocurrency payment system that allows merchant's to receive payments on their e-commerce portals. Unlike other platforms, Zenkipay ensures customer satisfaction through its payment process. guarantee deposit (delivered product and expected quality) to settle payment to the merchant, thus avoiding the loss of client assets due to online scams.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@zenki.fi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package fi.zenki.zenkipay.api.services;

import com.fasterxml.jackson.core.type.TypeReference;

import fi.zenki.zenkipay.api.ApiException;
import fi.zenki.zenkipay.api.ApiClient;
import fi.zenki.zenkipay.api.Configuration;
import fi.zenki.zenkipay.api.model.*;
import fi.zenki.zenkipay.api.Pair;

import fi.zenki.zenkipay.api.model.AuthenticationErrorResponse;
import fi.zenki.zenkipay.api.model.RequestTokenOAuth2;
import fi.zenki.zenkipay.api.model.TokenOAuth2;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-23T23:19:43.293151248Z[Etc/UTC]")
public class AuthenticationAndAuthorizationApi {
  private ApiClient apiClient;

  public AuthenticationAndAuthorizationApi() {
    this(Configuration.getDefaultApiClient());
  }

  public AuthenticationAndAuthorizationApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Create an authentication token in Zenki
   * This request must be sent each time it is required to generate a token to consume Zenki services.
   * @param contentType Tipo de contenido aceptado. (required)
   * @param accept Formatos aceptados. (required)
   * @param requestTokenOAuth2 Parameters for OAuth 2 token creation. (optional)
   * @return TokenOAuth2
   * @throws ApiException if fails to make API call
   * For more details on the services, you can consult the documentation Zenkipay official.
   * @see <a href="https://developer.zenki.fi/">Create an authentication token in Zenki Documentation</a>
   */
  public TokenOAuth2 createToken(String contentType, String accept, RequestTokenOAuth2 requestTokenOAuth2) throws ApiException {
    Object localVarPostBody = requestTokenOAuth2;
    
    // verify the required parameter 'contentType' is set
    if (contentType == null) {
      throw new ApiException(400, "Missing the required parameter 'contentType' when calling createToken");
    }
    
    // verify the required parameter 'accept' is set
    if (accept == null) {
      throw new ApiException(400, "Missing the required parameter 'accept' when calling createToken");
    }
    
    // create path and map variables
    String localVarPath = "/v1/oauth/tokens";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (contentType != null)
      localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
if (accept != null)
      localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<TokenOAuth2> localVarReturnType = new TypeReference<TokenOAuth2>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
