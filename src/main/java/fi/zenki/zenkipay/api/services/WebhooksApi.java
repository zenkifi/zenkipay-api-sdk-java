/*
 * Zenkipay API
 * Definition of technical specification of the product; Zenkipay is a gateway cryptocurrency payment system that allows merchant's to receive payments on their e-commerce portals. Unlike other platforms, Zenkipay ensures customer satisfaction through its payment process. guarantee deposit (delivered product and expected quality) to settle payment to the merchant, thus avoiding the loss of client assets due to online scams.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@zenki.fi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package fi.zenki.zenkipay.api.services;

import com.fasterxml.jackson.core.type.TypeReference;

import fi.zenki.zenkipay.api.ApiException;
import fi.zenki.zenkipay.api.ApiClient;
import fi.zenki.zenkipay.api.Configuration;
import fi.zenki.zenkipay.api.model.*;
import fi.zenki.zenkipay.api.Pair;

import fi.zenki.zenkipay.api.model.Webhook;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-23T15:51:51.121336960Z[Etc/UTC]")
public class WebhooksApi {
  private ApiClient apiClient;

  public WebhooksApi() {
    this(Configuration.getDefaultApiClient());
  }

  public WebhooksApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Event notifications for merchant
   * Service that allows different events to be sent to the merchant.
   * @param svixId Unique message identifier for the webhook message. This identifier is unique across all messages, but will be the same when the same webhook is forwarded (for example, due to a previous error). (required)
   * @param svixTimestamp Date and time when the webhook is sent to the merchant, in milliseconds and UTC format.  The Unix epoch (or Unix time or POSIX time or Unix timestamp) is the number of seconds elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds (in ISO 8601: 1970-01-01T00: 00:00Z) (required)
   * @param svixSignature Base64 encoded signature (delimited by spaces) on the sent content, the signature is generated from the following structure: signed_content &#x3D; \&quot;${svix_id}.${svix_timestamp}.${body}\&quot;. (required)
   * @param contentType Content Type accepted. (required)
   * @param webhook A JSON structure will be sent that will have the information about the event to notify the merchant. (optional)
   * @throws ApiException if fails to make API call
   * For more details on the services, consult the documentation Zenkipay official.
NOTE: You must change the entire URL displayed at the top of the service to the final URL where you will receive the webhooks that Zenkipay sends you.
   * @see <a href="https://developer.zenki.fi/">Event notifications for merchant Documentation</a>
   */
  public void sendEvent(String svixId, String svixTimestamp, String svixSignature, String contentType, Webhook webhook) throws ApiException {
    Object localVarPostBody = webhook;
    
    // verify the required parameter 'svixId' is set
    if (svixId == null) {
      throw new ApiException(400, "Missing the required parameter 'svixId' when calling sendEvent");
    }
    
    // verify the required parameter 'svixTimestamp' is set
    if (svixTimestamp == null) {
      throw new ApiException(400, "Missing the required parameter 'svixTimestamp' when calling sendEvent");
    }
    
    // verify the required parameter 'svixSignature' is set
    if (svixSignature == null) {
      throw new ApiException(400, "Missing the required parameter 'svixSignature' when calling sendEvent");
    }
    
    // verify the required parameter 'contentType' is set
    if (contentType == null) {
      throw new ApiException(400, "Missing the required parameter 'contentType' when calling sendEvent");
    }
    
    // create path and map variables
    String localVarPath = "/URL_MERCHANT";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (svixId != null)
      localVarHeaderParams.put("Svix-Id", apiClient.parameterToString(svixId));
if (svixTimestamp != null)
      localVarHeaderParams.put("Svix-Timestamp", apiClient.parameterToString(svixTimestamp));
if (svixSignature != null)
      localVarHeaderParams.put("Svix-Signature", apiClient.parameterToString(svixSignature));
if (contentType != null)
      localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }
}
