/*
 * Zenkipay API
 * Definition of technical specification of the product; Zenkipay is a gateway cryptocurrency payment system that allows merchant's to receive payments on their e-commerce portals. Unlike other platforms, Zenkipay ensures customer satisfaction through its payment process. guarantee deposit (delivered product and expected quality) to settle payment to the merchant, thus avoiding the loss of client assets due to online scams.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@zenki.fi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package fi.zenki.zenkipay.api.services;

import com.fasterxml.jackson.core.type.TypeReference;

import fi.zenki.zenkipay.api.ApiException;
import fi.zenki.zenkipay.api.ApiClient;
import fi.zenki.zenkipay.api.Configuration;
import fi.zenki.zenkipay.api.model.*;
import fi.zenki.zenkipay.api.Pair;

import fi.zenki.zenkipay.api.model.AddTracking;
import fi.zenki.zenkipay.api.model.AddTrackingEvent;
import fi.zenki.zenkipay.api.model.ErrorResponse;
import fi.zenki.zenkipay.api.model.Tracking;
import fi.zenki.zenkipay.api.model.TrackingEventsInner;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-23T15:55:44.125730643Z[Etc/UTC]")
public class TrackingApi {
  private ApiClient apiClient;

  public TrackingApi() {
    this(Configuration.getDefaultApiClient());
  }

  public TrackingApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Shipping Status Update
   * Based on the order id and the tracking id the delivery status is updated.
   * @param zenkiOrderId Unique order identifier generated by Zenkipay. (required)
   * @param zenkiTrackId Unique tracking identifier generated by Zenkipay. (required)
   * @param contentType Content type accepted. (required)
   * @param accept Accepted formats. (required)
   * @param X_ZENKI_PLUGIN_ID Unique customer identifier used to establish connection with Zenkipay services. (optional)
   * @param acceptLanguage Indicates the language type code for which the content of the services response is returned according to the language reported.  The definition of the ISO_639 standard is used. See: https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes or https://www.iso.org/iso-639-language-codes.html (optional)
   * @param addTrackingEvent A JSON structure will be sent that will have the required information to update the shipping status. (optional)
   * @return List&lt;TrackingEventsInner&gt;
   * @throws ApiException if fails to make API call
   * For more details on the services, consult the documentation Zenkipay official.
   * @see <a href="http://developer.zenki.fi/">Shipping Status Update Documentation</a>
   */
  public List<TrackingEventsInner> addEventTracking(String zenkiOrderId, String zenkiTrackId, String contentType, String accept, String X_ZENKI_PLUGIN_ID, String acceptLanguage, AddTrackingEvent addTrackingEvent) throws ApiException {
    Object localVarPostBody = addTrackingEvent;
    
    // verify the required parameter 'zenkiOrderId' is set
    if (zenkiOrderId == null) {
      throw new ApiException(400, "Missing the required parameter 'zenkiOrderId' when calling addEventTracking");
    }
    
    // verify the required parameter 'zenkiTrackId' is set
    if (zenkiTrackId == null) {
      throw new ApiException(400, "Missing the required parameter 'zenkiTrackId' when calling addEventTracking");
    }
    
    // verify the required parameter 'contentType' is set
    if (contentType == null) {
      throw new ApiException(400, "Missing the required parameter 'contentType' when calling addEventTracking");
    }
    
    // verify the required parameter 'accept' is set
    if (accept == null) {
      throw new ApiException(400, "Missing the required parameter 'accept' when calling addEventTracking");
    }
    
    // create path and map variables
    String localVarPath = "/v1/pay/orders/{zenkiOrderId}/tracking/{zenkiTrackId}"
      .replaceAll("\\{" + "zenkiOrderId" + "\\}", apiClient.escapeString(zenkiOrderId.toString()))
      .replaceAll("\\{" + "zenkiTrackId" + "\\}", apiClient.escapeString(zenkiTrackId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (X_ZENKI_PLUGIN_ID != null)
      localVarHeaderParams.put("X-ZENKI-PLUGIN-ID", apiClient.parameterToString(X_ZENKI_PLUGIN_ID));
if (acceptLanguage != null)
      localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));
if (contentType != null)
      localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
if (accept != null)
      localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "JWTAuth" };

    TypeReference<List<TrackingEventsInner>> localVarReturnType = new TypeReference<List<TrackingEventsInner>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Registration number for tracking
   * One or more shipment tracking numbers are recorded for the order number.
   * @param zenkiOrderId Unique order identifier generated by Zenkipay. (required)
   * @param contentType Content type accepted. (required)
   * @param accept Accepted formats. (required)
   * @param X_ZENKI_PLUGIN_ID Unique customer identifier used to establish connection with Zenkipay services. (optional)
   * @param acceptLanguage Indicates the language type code for which the content of the services response is returned according to the language reported.  The definition of the ISO_639 standard is used. See: https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes or https://www.iso.org/iso-639-language-codes.html (optional)
   * @param addTracking The registration of a tracking number associated with a shipment may be requested so that Zenkipay can track the delivery process, as reported by the courier. (optional)
   * @return Tracking
   * @throws ApiException if fails to make API call
   * For more information about the services, see the official Zenkipay documentation.
   * @see <a href="http://developer.zenki.fi/">Registration number for tracking Documentation</a>
   */
  public Tracking registerTrackingOrders(String zenkiOrderId, String contentType, String accept, String X_ZENKI_PLUGIN_ID, String acceptLanguage, AddTracking addTracking) throws ApiException {
    Object localVarPostBody = addTracking;
    
    // verify the required parameter 'zenkiOrderId' is set
    if (zenkiOrderId == null) {
      throw new ApiException(400, "Missing the required parameter 'zenkiOrderId' when calling registerTrackingOrders");
    }
    
    // verify the required parameter 'contentType' is set
    if (contentType == null) {
      throw new ApiException(400, "Missing the required parameter 'contentType' when calling registerTrackingOrders");
    }
    
    // verify the required parameter 'accept' is set
    if (accept == null) {
      throw new ApiException(400, "Missing the required parameter 'accept' when calling registerTrackingOrders");
    }
    
    // create path and map variables
    String localVarPath = "/v1/pay/orders/{zenkiOrderId}/tracking"
      .replaceAll("\\{" + "zenkiOrderId" + "\\}", apiClient.escapeString(zenkiOrderId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (X_ZENKI_PLUGIN_ID != null)
      localVarHeaderParams.put("X-ZENKI-PLUGIN-ID", apiClient.parameterToString(X_ZENKI_PLUGIN_ID));
if (acceptLanguage != null)
      localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));
if (contentType != null)
      localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
if (accept != null)
      localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "JWTAuth" };

    TypeReference<Tracking> localVarReturnType = new TypeReference<Tracking>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
