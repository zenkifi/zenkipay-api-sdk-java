/*
 * Zenkipay API
 * Definition of technical specification of the product; Zenkipay is a gateway cryptocurrency payment system that allows merchant's to receive payments on their e-commerce portals. Unlike other platforms, Zenkipay ensures customer satisfaction through its payment process. guarantee deposit (delivered product and expected quality) to settle payment to the merchant, thus avoiding the loss of client assets due to online scams.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@zenki.fi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fi.zenki.zenkipay.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Summary of the discount made to the purchase for the use of crypto love.
 */
@JsonPropertyOrder({
  OrderPaymentInfoCryptoLove.JSON_PROPERTY_DISCOUNT_PERCENTAGE,
  OrderPaymentInfoCryptoLove.JSON_PROPERTY_DISCOUNT_AMOUNT,
  OrderPaymentInfoCryptoLove.JSON_PROPERTY_FINAL_AMOUNT,
  OrderPaymentInfoCryptoLove.JSON_PROPERTY_CURRENCY
})
@JsonTypeName("Order_paymentInfo_cryptoLove")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-23T15:51:51.121336960Z[Etc/UTC]")
public class OrderPaymentInfoCryptoLove {
  public static final String JSON_PROPERTY_DISCOUNT_PERCENTAGE = "discountPercentage";
  private Double discountPercentage;

  public static final String JSON_PROPERTY_DISCOUNT_AMOUNT = "discountAmount";
  private Double discountAmount;

  public static final String JSON_PROPERTY_FINAL_AMOUNT = "finalAmount";
  private Double finalAmount;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private String currency;

  public OrderPaymentInfoCryptoLove() {
  }

  public OrderPaymentInfoCryptoLove discountPercentage(Double discountPercentage) {
    
    this.discountPercentage = discountPercentage;
    return this;
  }

   /**
   * Discount in percentage granted by the merchant to the buyer in his purchase for activating crypto love.
   * minimum: 0
   * maximum: 100
   * @return discountPercentage
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DISCOUNT_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getDiscountPercentage() {
    return discountPercentage;
  }


  @JsonProperty(JSON_PROPERTY_DISCOUNT_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDiscountPercentage(Double discountPercentage) {
    this.discountPercentage = discountPercentage;
  }


  public OrderPaymentInfoCryptoLove discountAmount(Double discountAmount) {
    
    this.discountAmount = discountAmount;
    return this;
  }

   /**
   * Discount in amount granted by the merchant to the buyer in his purchase for activating crypto love in USD.
   * minimum: 0
   * @return discountAmount
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DISCOUNT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getDiscountAmount() {
    return discountAmount;
  }


  @JsonProperty(JSON_PROPERTY_DISCOUNT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDiscountAmount(Double discountAmount) {
    this.discountAmount = discountAmount;
  }


  public OrderPaymentInfoCryptoLove finalAmount(Double finalAmount) {
    
    this.finalAmount = finalAmount;
    return this;
  }

   /**
   * Payment amount after discount in USD.
   * minimum: 0
   * @return finalAmount
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FINAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getFinalAmount() {
    return finalAmount;
  }


  @JsonProperty(JSON_PROPERTY_FINAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFinalAmount(Double finalAmount) {
    this.finalAmount = finalAmount;
  }


  public OrderPaymentInfoCryptoLove currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Unique currency code of the country which is used to settle the merchant always in USD, the ISO 4217 standard definition is used with 3 characters, see: https://es.wikipedia.org/wiki/ISO_4217 o https://www.iso.org/iso-4217-currency-codes.html
   * @return currency
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrency(String currency) {
    this.currency = currency;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderPaymentInfoCryptoLove orderPaymentInfoCryptoLove = (OrderPaymentInfoCryptoLove) o;
    return Objects.equals(this.discountPercentage, orderPaymentInfoCryptoLove.discountPercentage) &&
        Objects.equals(this.discountAmount, orderPaymentInfoCryptoLove.discountAmount) &&
        Objects.equals(this.finalAmount, orderPaymentInfoCryptoLove.finalAmount) &&
        Objects.equals(this.currency, orderPaymentInfoCryptoLove.currency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(discountPercentage, discountAmount, finalAmount, currency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderPaymentInfoCryptoLove {\n");
    sb.append("    discountPercentage: ").append(toIndentedString(discountPercentage)).append("\n");
    sb.append("    discountAmount: ").append(toIndentedString(discountAmount)).append("\n");
    sb.append("    finalAmount: ").append(toIndentedString(finalAmount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `discountPercentage` to the URL query string
    if (getDiscountPercentage() != null) {
      try {
        joiner.add(String.format("%sdiscountPercentage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDiscountPercentage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `discountAmount` to the URL query string
    if (getDiscountAmount() != null) {
      try {
        joiner.add(String.format("%sdiscountAmount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDiscountAmount()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `finalAmount` to the URL query string
    if (getFinalAmount() != null) {
      try {
        joiner.add(String.format("%sfinalAmount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFinalAmount()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `currency` to the URL query string
    if (getCurrency() != null) {
      try {
        joiner.add(String.format("%scurrency%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCurrency()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

